// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/api/building/repository.go

// Package mock_building is a generated GoMock package.
package building

import (
	models "building_management/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateOrUpdateBuilding mocks base method.
func (m *MockRepositoryInterface) CreateOrUpdateBuilding(ctx context.Context, building models.Building) (*models.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateBuilding", ctx, building)
	ret0, _ := ret[0].(*models.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateBuilding indicates an expected call of CreateOrUpdateBuilding.
func (mr *MockRepositoryInterfaceMockRecorder) CreateOrUpdateBuilding(ctx, building interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateBuilding", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateOrUpdateBuilding), ctx, building)
}

// DeleteBuilding mocks base method.
func (m *MockRepositoryInterface) DeleteBuilding(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuilding", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBuilding indicates an expected call of DeleteBuilding.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteBuilding(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuilding", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteBuilding), ctx, id)
}

// GetBuildingByID mocks base method.
func (m *MockRepositoryInterface) GetBuildingByID(ctx context.Context, ID int) (*models.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildingByID", ctx, ID)
	ret0, _ := ret[0].(*models.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildingByID indicates an expected call of GetBuildingByID.
func (mr *MockRepositoryInterfaceMockRecorder) GetBuildingByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildingByID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetBuildingByID), ctx, ID)
}

// GetBuildings mocks base method.
func (m *MockRepositoryInterface) GetBuildings(ctx context.Context) (models.BuildingSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildings", ctx)
	ret0, _ := ret[0].(models.BuildingSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildings indicates an expected call of GetBuildings.
func (mr *MockRepositoryInterfaceMockRecorder) GetBuildings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildings", reflect.TypeOf((*MockRepositoryInterface)(nil).GetBuildings), ctx)
}
